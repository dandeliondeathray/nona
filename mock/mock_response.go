// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dandeliondeathray/nona/game (interfaces: Response)

// Package mock is a generated GoMock package.
package mock

import (
	game "github.com/dandeliondeathray/nona/game"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResponse is a mock of Response interface
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// OnCorrectWord mocks base method
func (m *MockResponse) OnCorrectWord(arg0 game.Player, arg1 game.Word) {
	m.ctrl.Call(m, "OnCorrectWord", arg0, arg1)
}

// OnCorrectWord indicates an expected call of OnCorrectWord
func (mr *MockResponseMockRecorder) OnCorrectWord(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCorrectWord", reflect.TypeOf((*MockResponse)(nil).OnCorrectWord), arg0, arg1)
}

// OnPuzzleNotification mocks base method
func (m *MockResponse) OnPuzzleNotification(arg0 game.Player, arg1 game.Puzzle) {
	m.ctrl.Call(m, "OnPuzzleNotification", arg0, arg1)
}

// OnPuzzleNotification indicates an expected call of OnPuzzleNotification
func (mr *MockResponseMockRecorder) OnPuzzleNotification(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPuzzleNotification", reflect.TypeOf((*MockResponse)(nil).OnPuzzleNotification), arg0, arg1)
}
