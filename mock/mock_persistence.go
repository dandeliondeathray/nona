// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dandeliondeathray/nona/persistence (interfaces: RecoveryHandler)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRecoveryHandler is a mock of RecoveryHandler interface
type MockRecoveryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRecoveryHandlerMockRecorder
}

// MockRecoveryHandlerMockRecorder is the mock recorder for MockRecoveryHandler
type MockRecoveryHandlerMockRecorder struct {
	mock *MockRecoveryHandler
}

// NewMockRecoveryHandler creates a new mock instance
func NewMockRecoveryHandler(ctrl *gomock.Controller) *MockRecoveryHandler {
	mock := &MockRecoveryHandler{ctrl: ctrl}
	mock.recorder = &MockRecoveryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecoveryHandler) EXPECT() *MockRecoveryHandlerMockRecorder {
	return m.recorder
}

// OnRoundRecovered mocks base method
func (m *MockRecoveryHandler) OnRoundRecovered(arg0 int64) {
	m.ctrl.Call(m, "OnRoundRecovered", arg0)
}

// OnRoundRecovered indicates an expected call of OnRoundRecovered
func (mr *MockRecoveryHandlerMockRecorder) OnRoundRecovered(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRoundRecovered", reflect.TypeOf((*MockRecoveryHandler)(nil).OnRoundRecovered), arg0)
}
