// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dandeliondeathray/nona/game (interfaces: Persistence)

// Package mock is a generated GoMock package.
package mock

import (
	game "github.com/dandeliondeathray/nona/game"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPersistence is a mock of Persistence interface
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// PlayerSolvedPuzzle mocks base method
func (m *MockPersistence) PlayerSolvedPuzzle(arg0 game.Player, arg1 int) {
	m.ctrl.Call(m, "PlayerSolvedPuzzle", arg0, arg1)
}

// PlayerSolvedPuzzle indicates an expected call of PlayerSolvedPuzzle
func (mr *MockPersistenceMockRecorder) PlayerSolvedPuzzle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerSolvedPuzzle", reflect.TypeOf((*MockPersistence)(nil).PlayerSolvedPuzzle), arg0, arg1)
}

// ResolvePlayerState mocks base method
func (m *MockPersistence) ResolvePlayerState(arg0 game.Player, arg1 game.PlayerStateResolution) {
	m.ctrl.Call(m, "ResolvePlayerState", arg0, arg1)
}

// ResolvePlayerState indicates an expected call of ResolvePlayerState
func (mr *MockPersistenceMockRecorder) ResolvePlayerState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePlayerState", reflect.TypeOf((*MockPersistence)(nil).ResolvePlayerState), arg0, arg1)
}
